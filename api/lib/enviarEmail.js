// ============================================================
// üíå VARAL DOS SONHOS ‚Äî /api/lib/enviarEmail.js
// ------------------------------------------------------------
// Integra√ß√£o real com EmailJS (ou modo simulado se n√£o configurado)
// ------------------------------------------------------------
// ‚úÖ Vari√°veis de ambiente (Render):
//    EMAILJS_SERVICE_ID
//    EMAILJS_TEMPLATE_ID
//    EMAILJS_USER_ID  (ou EMAILJS_PUBLIC_KEY)
// ------------------------------------------------------------
// üèÜ Recursos:
//   - Envia e-mails personalizados: cadastro, ado√ß√£o, atualiza√ß√£o
//   - Mant√©m compatibilidade total com o template do EmailJS
//   - Simula√ß√£o autom√°tica se n√£o configurado
// ============================================================

import fetch from "node-fetch";

/**
 * Envia e-mail via EmailJS
 * @param {string} destinatario - E-mail do destinat√°rio
 * @param {string} tipo - Tipo de mensagem (cadastro, adocao, status)
 * @param {object|string} dados - Dados din√¢micos ou mensagem direta
 * @param {number} pontuacao - Pontua√ß√£o opcional (gamifica√ß√£o)
 */
export default async function enviarEmail(destinatario, tipo = "geral", dados = {}, pontuacao = 0) {
  const SERVICE_ID = process.env.EMAILJS_SERVICE_ID;
  const TEMPLATE_ID = process.env.EMAILJS_TEMPLATE_ID;
  const USER_ID = process.env.EMAILJS_USER_ID || process.env.EMAILJS_PUBLIC_KEY;

  // ============================================================
  // ‚ö†Ô∏è Caso EmailJS n√£o esteja configurado
  // ============================================================
  if (!SERVICE_ID || !TEMPLATE_ID || !USER_ID) {
    console.warn("‚ö†Ô∏è EmailJS n√£o configurado. Envio de e-mail ser√° simulado.");
    console.log("üìß SIMULA√á√ÉO DE E-MAIL:");
    console.log("Destinat√°rio:", destinatario);
    console.log("Tipo:", tipo);
    console.log("Dados:", dados);
    return { status: "simulado", mensagem: "Envio de e-mail simulado (modo teste)." };
  }

  // ============================================================
  // üß© Montagem autom√°tica da mensagem
  // ============================================================
  let assunto = "Varal dos Sonhos üíô";
  let mensagem = "";

  if (typeof dados === "string") {
    mensagem = dados; // permite uso direto de string
  } else {
    switch (tipo) {
      case "cadastro":
        assunto = "üéâ Cadastro confirmado no Varal dos Sonhos!";
        mensagem = `
Ol√° ${dados.nome || ""}, üíô

Seu cadastro foi realizado com sucesso!
Agora voc√™ j√° pode adotar uma cartinha e espalhar sonhos ‚ú®

Acesse o site e veja as cartinhas dispon√≠veis:
https://varaldossonhos.vercel.app
`;
        break;

      case "adocao":
        assunto = "üíù Ado√ß√£o registrada com sucesso!";
        mensagem = `
Ol√° ${dados.nome || ""}, üíô

Sua ado√ß√£o foi registrada com sucesso!
Cartinha(s): ${dados.cartinhas?.join(", ") || "n√£o informadas"}
Ponto de coleta: ${dados.ponto_coleta || "n√£o informado"}

Aguarde nossa confirma√ß√£o de entrega do presente üéÅ
`;
        break;

      case "status":
        assunto = "üì¶ Atualiza√ß√£o da sua ado√ß√£o";
        mensagem = `
Ol√° ${dados.nome || ""},

Status atualizado: ${dados.status || "em andamento"}  
Mensagem: ${dados.mensagem || "Seu presente est√° a caminho üíô"}

Obrigado por fazer parte do Varal dos Sonhos! üåü
`;
        break;

      default:
        mensagem = typeof dados === "string" ? dados : "Ol√°! Obrigado por espalhar sonhos üíô";
    }
  }

  // ============================================================
  // ‚ú® Adiciona pontua√ß√£o (se existir)
  // ============================================================
  if (pontuacao > 0) {
    mensagem += `\n\n‚ú® Voc√™ ganhou ${pontuacao} ponto${pontuacao > 1 ? "s" : ""}!`;
  }

  // ============================================================
  // üì¶ Monta payload para o EmailJS
  // ============================================================
  const payload = {
    service_id: SERVICE_ID,
    template_id: TEMPLATE_ID,
    user_id: USER_ID,
    template_params: {
      to_email: destinatario,
      subject: assunto,
      message: mensagem,
    },
  };

  // ============================================================
  // üöÄ Envio via API EmailJS
  // ============================================================
  try {
    const res = await fetch("https://api.emailjs.com/api/v1.0/email/send", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(payload),
    });

    if (!res.ok) {
      const errText = await res.text();
      console.error("‚ùå Falha ao enviar e-mail:", errText);
      throw new Error(errText);
    }

    console.log(`‚úÖ E-mail (${tipo}) enviado com sucesso para ${destinatario}`);
    return { status: "ok", mensagem: "E-mail enviado com sucesso via EmailJS." };

  } catch (erro) {
    console.error("‚ùå Erro no envio de e-mail:", erro);
    return { status: "erro", mensagem: "Falha ao enviar e-mail: " + erro.message };
  }
}

